{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { useState, useEffect } from 'react';\nimport emoji from \"../JSON/emojiJson.json\";\nimport { getEmojis } from \"../axios/accessServer\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar EmojiComp = function EmojiComp(_ref) {\n  var CallbackFunction = _ref.CallbackFunction,\n    lastEmoji = _ref.lastEmoji;\n  var _useState = useState(lastEmoji),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentEmoji = _useState2[0],\n    setCurrentEmoji = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    emojiList = _useState4[0],\n    setEmojiList = _useState4[1];\n  useEffect(function () {\n    var fetchData = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        try {\n          var response = yield getEmojis();\n          var x = response.data;\n          setEmojiList(x);\n        } catch (error) {\n          console.error(error);\n        }\n      });\n      return function fetchData() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    fetchData();\n  }, []);\n  {\n    console.log(emoji);\n  }\n  return _jsxs(View, {\n    style: styles.container,\n    children: [CallbackFunction(currentEmoji), _jsx(Text, {\n      style: styles.title,\n      children: \"Choose a new emoji\"\n    }), _jsxs(ScrollView, {\n      style: styles.scrollView,\n      children: [\" \", _jsx(View, {\n        style: styles.emojiRow,\n        children: emojiList.map(function (emoji, key) {\n          return _jsx(Text, {\n            style: styles.emoji,\n            onPress: function onPress() {\n              setCurrentEmoji(emoji.emoji);\n            },\n            children: emoji.emoji\n          }, emoji.emojiId);\n        })\n      })]\n    }), \" \"]\n  });\n};\nvar deviceWidth = Math.round(Dimensions.get('window').width);\nvar deviceHeight = Math.round(Dimensions.get('window').height);\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#FFFFFF',\n    width: deviceWidth,\n    borderRadius: 15,\n    shadowColor: '#0000009D',\n    shadowRadius: 30,\n    flexDirection: 'column',\n    maxWidth: 600\n  },\n  title: {\n    fontFamily: 'GeneralSans-Semibold',\n    fontWeight: 'bold',\n    position: 'relative',\n    width: deviceWidth,\n    left: deviceWidth / 4\n  },\n  scrollView: {\n    flex: 1\n  },\n  emojiRow: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  emoji: {\n    fontSize: 20,\n    marginHorizontal: 10\n  }\n});\nexport default EmojiComp;","map":{"version":3,"names":["React","StyleSheet","View","Button","Text","Image","Dimensions","ScrollView","useState","useEffect","emoji","getEmojis","jsx","_jsx","jsxs","_jsxs","EmojiComp","_ref","CallbackFunction","lastEmoji","_useState","_useState2","_slicedToArray","currentEmoji","setCurrentEmoji","_useState3","_useState4","emojiList","setEmojiList","fetchData","_ref2","_asyncToGenerator","response","x","data","error","console","apply","arguments","log","style","styles","container","children","title","scrollView","emojiRow","map","key","onPress","emojiId","deviceWidth","Math","round","get","width","deviceHeight","height","create","backgroundColor","borderRadius","shadowColor","shadowRadius","flexDirection","maxWidth","fontFamily","fontWeight","position","left","flex","flexWrap","justifyContent","alignItems","fontSize","marginHorizontal"],"sources":["C:/company/masooda/client/components/EmojiComp.js"],"sourcesContent":["import React from 'react';\r\nimport { StyleSheet, View, Button, Text, Image, Dimensions, ScrollView } from 'react-native'; // הוספת ScrollView\r\nimport { useState, useEffect } from 'react';\r\nimport emoji from '../JSON/emojiJson.json';\r\n//====================================================================\r\nimport { getEmojis } from '../axios/accessServer';\r\n//====================================================================\r\nconst EmojiComp = ({ CallbackFunction, lastEmoji }) => {\r\n  const [currentEmoji, setCurrentEmoji] = useState(lastEmoji);\r\n  const [emojiList, setEmojiList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await getEmojis();\r\n        let x = response.data;\r\n        setEmojiList(x);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  { console.log(emoji); }\r\n  return (\r\n    <View style={styles.container}>\r\n      {CallbackFunction(currentEmoji)}\r\n      <Text style={styles.title}>Choose a new emoji</Text>\r\n      <ScrollView style={styles.scrollView}> {/* הוספת ScrollView */}\r\n        <View style={styles.emojiRow}>\r\n          {emojiList.map((emoji, key) => {\r\n            return (\r\n              <Text\r\n                key={emoji.emojiId}\r\n                style={styles.emoji}\r\n                onPress={() => {\r\n                  setCurrentEmoji(emoji.emoji);\r\n                }}>\r\n                {emoji.emoji}\r\n              </Text>\r\n            );\r\n          })}\r\n        </View>\r\n      </ScrollView> {/* סגירת ScrollView */}\r\n    </View>\r\n  );\r\n}\r\n\r\nconst deviceWidth = Math.round(Dimensions.get('window').width);\r\nconst deviceHeight = Math.round(Dimensions.get('window').height);\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: '#FFFFFF',\r\n    width: deviceWidth,\r\n    borderRadius: 15,\r\n    shadowColor: '#0000009D',\r\n    shadowRadius: 30,\r\n    flexDirection: 'column', // שינוי לcolumn\r\n    maxWidth: 600,\r\n  },\r\n  title: {\r\n    fontFamily: 'GeneralSans-Semibold',\r\n    fontWeight: 'bold',\r\n    position: 'relative',\r\n    width: deviceWidth,\r\n    left: deviceWidth / 4,\r\n  },\r\n  scrollView: { // סגנון ה-ScrollView\r\n    flex: 1,\r\n  },\r\n  emojiRow: { // סגנון של השורה המכילה את האימוגים\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  emoji: {\r\n    fontSize: 20,\r\n    marginHorizontal: 10,\r\n  },\r\n});\r\n\r\nexport default EmojiComp;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}