{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { useState, useEffect } from 'react';\nimport emoji from \"../JSON/emojiJson.json\";\nimport { getEmojis } from \"../axios/accessServer\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar EmojiComp = function EmojiComp(_ref) {\n  var CallbackFunction = _ref.CallbackFunction,\n    lastEmoji = _ref.lastEmoji;\n  var _useState = useState(lastEmoji),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentEmoji = _useState2[0],\n    setCurrentEmoji = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    emojis = _useState4[0],\n    setEmojis = _useState4[1];\n  useEffect(function () {\n    var fetchData = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        try {\n          var response = yield getEmojis();\n          var x = response.data;\n          console.log(x);\n          setEmojis(x);\n        } catch (error) {\n          console.error(error);\n        }\n      });\n      return function fetchData() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    fetchData();\n  }, []);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [CallbackFunction(currentEmoji), _jsx(Text, {\n      style: styles.title,\n      children: \"Choose a new emoji\"\n    }), emojis.map(function (emj, key) {\n      _jsx(Text, {\n        style: styles.emoji,\n        onPress: function onPress() {\n          setCurrentEmoji(emj);\n        },\n        children: emj\n      });\n    })]\n  });\n};\nvar deviceWidth = Math.round(Dimensions.get('window').width);\nvar deviceHeight = Math.round(Dimensions.get('window').height);\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#FFFFFF',\n    width: deviceWidth,\n    borderRadius: 15,\n    shadowColor: '#0000009D',\n    shadowRadius: 30,\n    flexDirection: 'row',\n    flex: 1,\n    flexWrap: 'wrap',\n    maxWidth: 600\n  },\n  title: {\n    fontFamily: 'GeneralSans-Semibold',\n    fontWeight: 'bold',\n    position: 'relative',\n    width: deviceWidth,\n    left: deviceWidth / 4\n  },\n  emoji: {\n    fontSize: 20,\n    marginHorizontal: 10\n  },\n  allEmojis: {}\n});\nexport default EmojiComp;","map":{"version":3,"names":["React","StyleSheet","View","Button","Text","Image","Dimensions","useState","useEffect","emoji","getEmojis","jsx","_jsx","jsxs","_jsxs","EmojiComp","_ref","CallbackFunction","lastEmoji","_useState","_useState2","_slicedToArray","currentEmoji","setCurrentEmoji","_useState3","_useState4","emojis","setEmojis","fetchData","_ref2","_asyncToGenerator","response","x","data","console","log","error","apply","arguments","style","styles","container","children","title","map","emj","key","onPress","deviceWidth","Math","round","get","width","deviceHeight","height","create","backgroundColor","borderRadius","shadowColor","shadowRadius","flexDirection","flex","flexWrap","maxWidth","fontFamily","fontWeight","position","left","fontSize","marginHorizontal","allEmojis"],"sources":["C:/company/masooda/client/components/EmojiComp.js"],"sourcesContent":["import React from 'react';\r\nimport { StyleSheet, View, Button, Text, Image, Dimensions} from 'react-native';\r\nimport { useState, useEffect } from 'react';\r\nimport emoji from '../JSON/emojiJson.json'\r\n//====================================================================\r\nimport {getEmojis} from '../axios/accessServer';\r\n//====================================================================\r\nconst EmojiComp = ({ CallbackFunction, lastEmoji }) => {\r\n    const [currentEmoji, setCurrentEmoji] = useState(lastEmoji);\r\n    const [emojis, setEmojis] = useState([]);\r\n\r\n\r\n    useEffect(() => \r\n    {\r\n        const fetchData = async () => {\r\n          try {\r\n            const response = await getEmojis();\r\n            let x = response.data;\r\n            console.log(x);\r\n            setEmojis(x);\r\n                        \r\n          } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n    fetchData();\r\n}, []);\r\n   \r\n\r\n    return(\r\n        <View style={styles.container}>\r\n\r\n            \r\n            \r\n\r\n\r\n            {CallbackFunction(currentEmoji)}\r\n            \r\n            <Text style={styles.title}>Choose a new emoji</Text>\r\n            {emojis.map((emj, key) => {\r\n                <Text style={styles.emoji} onPress={()=>{\r\n                    setCurrentEmoji(emj);                \r\n                }}>{emj }</Text>\r\n            })}\r\n\r\n           \r\n        </View>\r\n\r\n\r\n    );\r\n}\r\nconst deviceWidth = Math.round(Dimensions.get('window').width);\r\nconst deviceHeight = Math.round(Dimensions.get('window').height);\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        backgroundColor: '#FFFFFF',\r\n        width: deviceWidth,\r\n        borderRadius: 15,\r\n        shadowColor: '#0000009D',\r\n        shadowRadius: 30,\r\n        flexDirection: 'row',\r\n        flex: 1,\r\n        flexWrap: 'wrap',\r\n        maxWidth: 600,\r\n\r\n    },\r\n    title:{\r\n        fontFamily: 'GeneralSans-Semibold',\r\n        fontWeight: 'bold',\r\n        position: 'relative',\r\n        width: deviceWidth,\r\n        left: deviceWidth/4,\r\n\r\n    },\r\n    emoji:{\r\n        fontSize: 20,\r\n        marginHorizontal: 10,\r\n        \r\n    },\r\n    allEmojis:{\r\n        \r\n    }\r\n});\r\n\r\nexport default EmojiComp;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}